{"version":3,"sources":["components/Header.js","components/Card.js","components/Form.js","components/AppContent.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","Card","_ref","link","name","open","img","target","rel","height","width","alt","src","Form","setToken","onKeyUp","type","id","htmlFor","propTypes","artists","PropTypes","array","AppContent","token","getting","components_Header","map","info","components_Card","Object","assign","key","components_Form","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","self","config","headers","Accept","Content-Type","Authorization","concat","axios","get","then","response","setState","data","artist","index","images","url","external_urls","spotify","uri","catch","error","e","value","which","keyCode","getArtistis","components_AppContent","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.769e1708.chunk.js","sourcesContent":["import React from 'react';\nconst Header = () => (\n  <header>\n    <nav>\n      <div className=\"nav-wrapper\">\n        <a href=\"/\" className=\"brand-logo center\">\n          <i className=\"fab fa-spotify\"></i>\n          Spotify View \n        </a>\n      </div>\n    </nav>\n  </header>\n)\n\nexport default Header\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Card = ({ link, name, open, img }) => (\n  <div className=\"col s12 m6 l4\">\n    <div className=\"card\">\n      <div className=\"card-image waves-effect waves-block waves-light\">\n        <a href={ link } target=\"_blank\" rel=\"noopener noreferrer\">\n          <img height=\"300\" width=\"300\" className=\"activator\" alt={ name } src={ img } />\n        </a>\n      </div>\n      <div className=\"card-content\">\n        <a href={ link } target=\"_blank\" rel=\"noopener noreferrer\">\n          <span className=\"card-title activator grey-text text-darken-4\">\n            { name }\n          </span>\n        </a>\n        <p>\n          <a href={ open } >Abrir no Spotify</a>\n        </p>\n      </div>\n    </div>\n  </div>\n)\n\nCard.propTypes = {\n  link: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  open: PropTypes.string.isRequired,\n  img: PropTypes.string.isRequired\n}\n\nexport default Card\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Form = ({ setToken }) => (\n  <div>\n    <div className=\"col s12\">\n      <p className=\"center\">\n        O token está vazio, expirou ou é inválido. <br />\n        Obtenha outro <a href=\"https://developer.spotify.com/console/get-several-artists/\" target=\"_blank\" rel=\"noopener noreferrer\">Nesse link</a> e insira no campo abaixo\n      </p>\n    </div>\n    <div className=\"col s12\">\n      <div className=\"row\">\n        <div className=\"input-field col s12\">\n          <i className=\"fas fa-lock-open prefix\"></i>\n          <input onKeyUp={ setToken } type=\"text\" id=\"set_token\" />\n          <label htmlFor=\"set_token\">Token</label>\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\nForm.propTypes = {\n  setToken: PropTypes.func\n}\n\nexport default Form\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Header from './Header'\nimport Card from './Card'\nimport Form from './Form'\n\nconst AppContent = ({artists, token, getting, setToken}) => (\n  <div className=\"App\">\n    <Header />\n    <main className=\"main\">\n      {!!token ?\n        <div className=\"row container\">\n          {artists.map((info) => (\n            <Card key={ info.id } { ...info } />\n          ))}\n        </div> :\n        <div className=\"row container\">\n          <Form setToken={ setToken }/>\n        </div>\n      }\n    </main>\n  </div>\n)\n\nCard.propTypes = {\n  artists: PropTypes.array\n}\n\nexport default AppContent\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport AppContent from './components/AppContent'\n\nimport './App.scss';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      artists: [],\n      token: ``,\n    }\n    this.setToken = this.setToken.bind(this)\n  }\n\n  getArtistis(token) {\n    let ids = [\n      '0TcVnvKse98awlZxtUKIOk',\n      '11irmEzISytQwB3G8uhC5E',\n      '2UhA8yc1DpFfkutXq5lMah'\n    ] // ids dos artistas\n    let self = this // referencia para usar o this dentro do ajax\n    let config = {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`,\n      }\n    }\n\n    axios.get(`https://api.spotify.com/v1/artists?ids=${ids}`, config)\n    .then(function (response) {\n      self.setState({\n        artists: response.data.artists.map((artist, index) => ({\n          id: index,\n          img: artist.images[1].url,\n          name: artist.name,\n          link: artist.external_urls.spotify,\n          open: artist.uri\n        }))\n      })\n    })\n    .catch(function (error) {\n      self.setState({\n        token: ``\n      })\n    });\n  }\n\n  setToken (e) {\n    let token = `` + e.target.value\n    let keyCode = e.which || e.keyCode\n    const ENTER = 13\n    if (keyCode === ENTER) {\n      this.setState({ token: token})\n      this.getArtistis(token)\n    }\n  }\n\n  render () {\n    return <AppContent { ...this.state } setToken={ this.setToken }/>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Header.js","components/Card.js","components/AppContent.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","Card","_ref","link","name","open","img","target","rel","height","width","alt","src","propTypes","artists","PropTypes","array","AppContent","components_Header","map","info","components_Card","Object","assign","key","id","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","self","axios","get","concat","headers","Accept","Content-Type","Authorization","then","response","setState","data","artist","index","images","url","external_urls","spotify","uri","catch","error","console","log","components_AppContent","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oSAceA,EAbA,kBACbC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,qBACpBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBADf,oBC2BOE,EA7BF,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,KAAMC,EAAfH,EAAeG,KAAMC,EAArBJ,EAAqBI,IAArB,OACXV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAOG,EAAOI,OAAO,SAASC,IAAI,uBACnCZ,EAAAC,EAAAC,cAAA,OAAKW,OAAO,MAAMC,MAAM,MAAMX,UAAU,YAAYY,IAAMP,EAAOQ,IAAMN,MAG3EV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAOG,EAAOI,OAAO,SAASC,IAAI,uBACnCZ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gDACZK,IAGNR,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAOK,GAAV,yBCCVJ,EAAKY,UAAY,CACfC,QAASC,IAAUC,OAGNC,MAjBI,SAAAf,GAAA,IAAEY,EAAFZ,EAAEY,QAAF,OACjBlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZe,EAAQK,IAAI,SAACC,GAAD,OACXxB,EAAAC,EAAAC,cAACuB,EAADC,OAAAC,OAAA,CAAMC,IAAMJ,EAAKK,IAAUL,UC0CtBM,qBA9Cb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAQ,KAAAJ,IAChBE,EAAAN,OAAAS,EAAA,EAAAT,CAAAQ,KAAAR,OAAAU,EAAA,EAAAV,CAAAI,GAAAO,KAAAH,KAAMH,KACDO,MAAQ,CACXpB,QAAS,IAHKc,mFAQhB,IAKIO,EAAOL,KASXM,IAAMC,IAAN,0CAAAC,OAdU,CACR,yBACA,yBACA,2BAGW,CACXC,QAAS,CACPC,OAAU,mBACVC,eAAgB,mBAChBC,cAAA,gTAKHC,KAAK,SAAUC,GAUd,OATAT,EAAKU,SAAS,CACZ/B,QAAS8B,EAASE,KAAKhC,QAAQK,IAAI,SAAC4B,EAAQC,GAAT,MAAoB,CACrDvB,GAAIuB,EACJ1C,IAAKyC,EAAOE,OAAO,GAAGC,IACtB9C,KAAM2C,EAAO3C,KACbD,KAAM4C,EAAOI,cAAcC,QAC3B/C,KAAM0C,EAAOM,UAGV,IAERC,MAAM,SAAUC,GAEf,OADAC,QAAQC,IAAIF,IACL,qCAKT,OAAO3D,EAAAC,EAAAC,cAAC4D,EAAgB5B,KAAKI,cA3CfyB,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtE,EAAAC,EAAAC,cAACqE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.8cb5776c.chunk.js","sourcesContent":["import React from 'react';\nconst Header = () => (\n  <header>\n    <nav>\n      <div className=\"nav-wrapper\">\n        <a href=\"/\" className=\"brand-logo center\">\n          <i className=\"fab fa-spotify\"></i>\n          Spotify View \n        </a>\n      </div>\n    </nav>\n  </header>\n)\n\nexport default Header\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Card = ({ link, name, open, img }) => (\n  <div className=\"col s12 m6 l4\">\n    <div className=\"card\">\n      <div className=\"card-image waves-effect waves-block waves-light\">\n        <a href={ link } target=\"_blank\" rel=\"noopener noreferrer\">\n          <img height=\"300\" width=\"300\" className=\"activator\" alt={ name } src={ img } />\n        </a>\n      </div>\n      <div className=\"card-content\">\n        <a href={ link } target=\"_blank\" rel=\"noopener noreferrer\">\n          <span className=\"card-title activator grey-text text-darken-4\">\n            { name }\n          </span>\n        </a>\n        <p>\n          <a href={ open } >Abrir no Spotify</a>\n        </p>\n      </div>\n    </div>\n  </div>\n)\n\nCard.propTypes = {\n  link: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  open: PropTypes.string.isRequired,\n  img: PropTypes.string.isRequired\n}\n\nexport default Card\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Header from './Header'\nimport Card from './Card'\n\nconst AppContent = ({artists}) => (\n  <div className=\"App\">\n    <Header />\n    <main className=\"main\">\n      <div className=\"row container\">\n        {artists.map((info) => (\n          <Card key={ info.id } { ...info } />\n        ))}\n      </div>\n    </main>\n  </div>\n)\n\nCard.propTypes = {\n  artists: PropTypes.array\n}\n\nexport default AppContent\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport AppContent from './components/AppContent'\n\nimport './App.scss';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      artists: []\n    }\n  }\n\n  componentDidMount() {\n    let ids = [\n      '0TcVnvKse98awlZxtUKIOk',\n      '11irmEzISytQwB3G8uhC5E',\n      '2UhA8yc1DpFfkutXq5lMah'\n    ] // ids dos artistas\n    let self = this // referencia para usar o this dentro do ajax\n    let config = {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer BQCPiAF81W5U7yGN9Rhp7N3acp7opTxYlFOMTVhlgOhKuiphwZkkp7QoXg_ZCeCczaRkvDn-ktEPy6gZXEDs95XpTUdZuj_dQjFqE54O6TcWtjCsiVaekc-dLFQaa3ViFGDEEtO_TKQAXNdrj7wCw5vF4EJ1lNRyYMtVLYVpULYcY1klQyLz-Bx2Kp2FDFK5cz0xQWg1WQSF3rPzsUHFjEec9q7BJFYCsEkMO8MRRMiCjfwXMveOpz4Vg25X29xtSf3yfQdJ7w9OfncX9tx3olswsa53-BLBoQg`,\n      }\n    }\n\n    axios.get(`https://api.spotify.com/v1/artists?ids=${ids}`, config)\n    .then(function (response) {\n      self.setState({\n        artists: response.data.artists.map((artist, index) => ({\n          id: index,\n          img: artist.images[1].url,\n          name: artist.name,\n          link: artist.external_urls.spotify,\n          open: artist.uri\n        }))\n      })\n      return true\n    })\n    .catch(function (error) {\n      console.log(error);\n      return false\n    });\n  }\n\n  render () {\n    return <AppContent { ...this.state } /> \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
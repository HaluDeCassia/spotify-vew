{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","artists","self","axios","get","concat","headers","Accept","Content-Type","Authorization","then","response","setState","data","map","artist","index","id","img","images","url","name","link","external_urls","spotify","open","uri","catch","error","console","log","react_default","a","createElement","className","href","info","key","target","rel","height","width","alt","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mRAwFeA,qBAjFb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,QAAS,IAHKR,mFAQhB,IAKIS,EAAON,KASXO,IAAMC,IAAN,0CAAAC,OAdU,CACR,yBACA,yBACA,2BAGW,CACXC,QAAS,CACPC,OAAU,mBACVC,eAAgB,mBAChBC,cAAA,gTAKHC,KAAK,SAAUC,GAUd,OATAT,EAAKU,SAAS,CACZX,QAASU,EAASE,KAAKZ,QAAQa,IAAI,SAACC,EAAQC,GAAT,MAAoB,CACrDC,GAAID,EACJE,IAAKH,EAAOI,OAAO,GAAGC,IACtBC,KAAMN,EAAOM,KACbC,KAAMP,EAAOQ,cAAcC,QAC3BC,KAAMV,EAAOW,UAGV,IAERC,MAAM,SAAUC,GAEf,OADAC,QAAQC,IAAIF,IACL,qCAKT,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,qBAAoBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAvD,qBAINH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZtC,KAAKI,MAAMC,QAAQa,IAAI,SAACsB,GAAD,OACtBL,EAAAC,EAAAC,cAAA,OAAKI,IAAMD,EAAKnB,GAAKiB,UAAU,iBAC7BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAOC,EAAKd,KAAOgB,OAAO,SAASC,IAAI,uBACxCR,EAAAC,EAAAC,cAAA,OAAKO,OAAO,MAAMC,MAAM,MAAMP,UAAU,YAAYQ,IAAMN,EAAKf,KAAOsB,IAAMP,EAAKlB,QAGrFa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAOC,EAAKd,KAAOgB,OAAO,SAASC,IAAI,uBACxCR,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gDACZE,EAAKf,OAGXU,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGE,KAAOC,EAAKX,KAAOa,OAAO,SAASC,IAAI,uBAA1C,sBAELR,EAAAC,EAAAC,cAAA,KAAGE,KAAOC,EAAKd,KAAOgB,OAAO,SAASC,IAAI,sCAtE1CK,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC","file":"static/js/main.6074808e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport './App.scss';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      artists: []\n    }\n  }\n\n  componentDidMount() {\n    let ids = [\n      '0TcVnvKse98awlZxtUKIOk',\n      '11irmEzISytQwB3G8uhC5E',\n      '2UhA8yc1DpFfkutXq5lMah'\n    ] // ids dos artistas\n    let self = this // referencia para usar o this dentro do ajax\n    let config = {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer BQApyguMBnc2O426VLBQP8dnJhuslm-0zIcBrGHWq4HlXwspvpffmiY6tOGmTt7P8oBcs3HdTDfnbkNyIidQ-XnAs3I2c1fSF-zTKMWwjYchTr6zwTCmhT6Y7sy6fnaSHFgXspy7-ynMnz-s6Aoc959gSK8jgT39DBa4AT7b97Ty565b6apMz-E5sFoM8LAYzqnkPQHSvJYUZJDKI-aNkalsbJgQF3QGwVFz2cAiF-bk85CmBuo02i-jqz3PtXmSW9oGxaZtb4nrpkmDBXS_lsWxq35fXv4O58w`,\n      }\n    }\n\n    axios.get(`https://api.spotify.com/v1/artists?ids=${ids}`, config)\n    .then(function (response) {\n      self.setState({\n        artists: response.data.artists.map((artist, index) => ({\n          id: index,\n          img: artist.images[1].url,\n          name: artist.name,\n          link: artist.external_urls.spotify,\n          open: artist.uri\n        }))\n      })\n      return true\n    })\n    .catch(function (error) {\n      console.log(error);\n      return false\n    });\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <header>\n          <nav>\n            <div className=\"nav-wrapper\">\n              <a href=\"/\" className=\"brand-logo center\"><i className=\"fab fa-spotify\"></i> Spotify View </a>\n            </div>\n          </nav>\n        </header>\n        <main className=\"main\">\n          <div className=\"row container\">\n            {this.state.artists.map((info) => (\n              <div key={ info.id } className=\"col s12 m6 l4\">\n                <div className=\"card\">\n                  <div className=\"card-image waves-effect waves-block waves-light\">\n                    <a href={ info.link } target=\"_blank\" rel=\"noopener noreferrer\">\n                      <img height=\"300\" width=\"300\" className=\"activator\" alt={ info.name } src={ info.img } />\n                    </a>\n                  </div>\n                  <div className=\"card-content\">\n                    <a href={ info.link } target=\"_blank\" rel=\"noopener noreferrer\">\n                      <span className=\"card-title activator grey-text text-darken-4\">\n                        { info.name }\n                      </span>\n                    </a>\n                    <p><a href={ info.open } target=\"_blank\" rel=\"noopener noreferrer\">Abrir no Spotify</a></p>\n                  </div>\n                  <a href={ info.link } target=\"_blank\" rel=\"noopener noreferrer\">\n                  </a>\n                </div>\n              </div>\n            ))}\n          </div>\n        </main>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}